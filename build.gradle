plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.11.0-SNAPSHOT" apply false
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply plugin: "architectury-plugin"
apply plugin: "dev.architectury.loom"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

def ENV = System.getenv()

group = project.maven_group
version = "${mod_version}"
archivesBaseName = project.archives_base_name

loom {
    silentMojangMappingsLicense()

    forge {
        mixinConfigs = [
                "lagremoval.mixins.json"
        ]

        dataGen {
            mod project.mod_id
        }
    }

    launches {
        data {
            arg "--existing", file("src/main/resources").absolutePath
        }
    }
}

repositories {
    maven {
        name = "FTB Maven"
        url = "https://maven.ftb.dev"
    }

    maven {
        url = "https://cursemaven.com"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings loom.officialMojangMappings()

    forge "net.minecraftforge:forge:${project.forge_version}"

    modImplementation "dev.ftb.mods:ftb-chunks-forge:${project.ftb_chunks_version}"

}

processResources {
    // define properties that can be used during resource processing
    inputs.property "version", project.version

    // this will replace the property "${version}" in your mods.toml
    // with the version you've defined in your gradle.properties
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    options.encoding = "UTF-8"
    options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    // add some additional metadata to the jar manifest
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
//jar.finalizedBy('reobfJar')
